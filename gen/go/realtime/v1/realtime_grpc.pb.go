// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: realtime/v1/realtime.proto

package realtimev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RealtimeService_SubscribeSessionEvents_FullMethodName = "/realtime.v1.RealtimeService/SubscribeSessionEvents"
	RealtimeService_HealthCheck_FullMethodName            = "/realtime.v1.RealtimeService/HealthCheck"
)

// RealtimeServiceClient is the client API for RealtimeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RealtimeServiceClient interface {
	// SubscribeSessionEvents 订阅指定会话的实时事件流
	SubscribeSessionEvents(ctx context.Context, in *SubscribeSessionEventsRequest, opts ...grpc.CallOption) (RealtimeService_SubscribeSessionEventsClient, error)
	// HealthCheck 检查服务健康状态
	HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type realtimeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRealtimeServiceClient(cc grpc.ClientConnInterface) RealtimeServiceClient {
	return &realtimeServiceClient{cc}
}

func (c *realtimeServiceClient) SubscribeSessionEvents(ctx context.Context, in *SubscribeSessionEventsRequest, opts ...grpc.CallOption) (RealtimeService_SubscribeSessionEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &RealtimeService_ServiceDesc.Streams[0], RealtimeService_SubscribeSessionEvents_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &realtimeServiceSubscribeSessionEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RealtimeService_SubscribeSessionEventsClient interface {
	Recv() (*SessionEvent, error)
	grpc.ClientStream
}

type realtimeServiceSubscribeSessionEventsClient struct {
	grpc.ClientStream
}

func (x *realtimeServiceSubscribeSessionEventsClient) Recv() (*SessionEvent, error) {
	m := new(SessionEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *realtimeServiceClient) HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, RealtimeService_HealthCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RealtimeServiceServer is the server API for RealtimeService service.
// All implementations should embed UnimplementedRealtimeServiceServer
// for forward compatibility
type RealtimeServiceServer interface {
	// SubscribeSessionEvents 订阅指定会话的实时事件流
	SubscribeSessionEvents(*SubscribeSessionEventsRequest, RealtimeService_SubscribeSessionEventsServer) error
	// HealthCheck 检查服务健康状态
	HealthCheck(context.Context, *emptypb.Empty) (*HealthCheckResponse, error)
}

// UnimplementedRealtimeServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRealtimeServiceServer struct {
}

func (UnimplementedRealtimeServiceServer) SubscribeSessionEvents(*SubscribeSessionEventsRequest, RealtimeService_SubscribeSessionEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeSessionEvents not implemented")
}
func (UnimplementedRealtimeServiceServer) HealthCheck(context.Context, *emptypb.Empty) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}

// UnsafeRealtimeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RealtimeServiceServer will
// result in compilation errors.
type UnsafeRealtimeServiceServer interface {
	mustEmbedUnimplementedRealtimeServiceServer()
}

func RegisterRealtimeServiceServer(s grpc.ServiceRegistrar, srv RealtimeServiceServer) {
	s.RegisterService(&RealtimeService_ServiceDesc, srv)
}

func _RealtimeService_SubscribeSessionEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeSessionEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RealtimeServiceServer).SubscribeSessionEvents(m, &realtimeServiceSubscribeSessionEventsServer{stream})
}

type RealtimeService_SubscribeSessionEventsServer interface {
	Send(*SessionEvent) error
	grpc.ServerStream
}

type realtimeServiceSubscribeSessionEventsServer struct {
	grpc.ServerStream
}

func (x *realtimeServiceSubscribeSessionEventsServer) Send(m *SessionEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _RealtimeService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RealtimeServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RealtimeService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RealtimeServiceServer).HealthCheck(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// RealtimeService_ServiceDesc is the grpc.ServiceDesc for RealtimeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RealtimeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "realtime.v1.RealtimeService",
	HandlerType: (*RealtimeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _RealtimeService_HealthCheck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeSessionEvents",
			Handler:       _RealtimeService_SubscribeSessionEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "realtime/v1/realtime.proto",
}
