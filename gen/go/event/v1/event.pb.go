// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: event/v1/event.proto

package eventv1

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UserInteraction_InteractionType int32

const (
	UserInteraction_UNKNOWN UserInteraction_InteractionType = 0 // 未知互动
	UserInteraction_FOLLOW  UserInteraction_InteractionType = 1 // 关注主播
	UserInteraction_SHARE   UserInteraction_InteractionType = 2 // 分享直播间
)

// Enum value maps for UserInteraction_InteractionType.
var (
	UserInteraction_InteractionType_name = map[int32]string{
		0: "UNKNOWN",
		1: "FOLLOW",
		2: "SHARE",
	}
	UserInteraction_InteractionType_value = map[string]int32{
		"UNKNOWN": 0,
		"FOLLOW":  1,
		"SHARE":   2,
	}
)

func (x UserInteraction_InteractionType) Enum() *UserInteraction_InteractionType {
	p := new(UserInteraction_InteractionType)
	*p = x
	return p
}

func (x UserInteraction_InteractionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserInteraction_InteractionType) Descriptor() protoreflect.EnumDescriptor {
	return file_event_v1_event_proto_enumTypes[0].Descriptor()
}

func (UserInteraction_InteractionType) Type() protoreflect.EnumType {
	return &file_event_v1_event_proto_enumTypes[0]
}

func (x UserInteraction_InteractionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserInteraction_InteractionType.Descriptor instead.
func (UserInteraction_InteractionType) EnumDescriptor() ([]byte, []int) {
	return file_event_v1_event_proto_rawDescGZIP(), []int{13, 0}
}

// 通用事件记录请求
type RecordEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType string `protobuf:"bytes,1,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"` // 事件类型 (可选，主要由 payload 决定)
	// Types that are assignable to EventPayload:
	//
	//	*RecordEventRequest_ChatMessage
	//	*RecordEventRequest_UserPresence
	//	*RecordEventRequest_StreamStatus
	//	*RecordEventRequest_GiftSent
	//	*RecordEventRequest_GuardPurchase
	//	*RecordEventRequest_SuperChatMessage
	//	*RecordEventRequest_WatchedCountUpdate
	//	*RecordEventRequest_LikeCountUpdate
	//	*RecordEventRequest_OnlineRankUpdate
	//	*RecordEventRequest_UserInteraction
	//	*RecordEventRequest_PlatformRoomInfoUpdated
	EventPayload isRecordEventRequest_EventPayload `protobuf_oneof:"event_payload"`
}

func (x *RecordEventRequest) Reset() {
	*x = RecordEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_v1_event_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordEventRequest) ProtoMessage() {}

func (x *RecordEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_event_v1_event_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordEventRequest.ProtoReflect.Descriptor instead.
func (*RecordEventRequest) Descriptor() ([]byte, []int) {
	return file_event_v1_event_proto_rawDescGZIP(), []int{0}
}

func (x *RecordEventRequest) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (m *RecordEventRequest) GetEventPayload() isRecordEventRequest_EventPayload {
	if m != nil {
		return m.EventPayload
	}
	return nil
}

func (x *RecordEventRequest) GetChatMessage() *ChatMessage {
	if x, ok := x.GetEventPayload().(*RecordEventRequest_ChatMessage); ok {
		return x.ChatMessage
	}
	return nil
}

func (x *RecordEventRequest) GetUserPresence() *UserPresence {
	if x, ok := x.GetEventPayload().(*RecordEventRequest_UserPresence); ok {
		return x.UserPresence
	}
	return nil
}

func (x *RecordEventRequest) GetStreamStatus() *StreamStatus {
	if x, ok := x.GetEventPayload().(*RecordEventRequest_StreamStatus); ok {
		return x.StreamStatus
	}
	return nil
}

func (x *RecordEventRequest) GetGiftSent() *GiftSent {
	if x, ok := x.GetEventPayload().(*RecordEventRequest_GiftSent); ok {
		return x.GiftSent
	}
	return nil
}

func (x *RecordEventRequest) GetGuardPurchase() *GuardPurchase {
	if x, ok := x.GetEventPayload().(*RecordEventRequest_GuardPurchase); ok {
		return x.GuardPurchase
	}
	return nil
}

func (x *RecordEventRequest) GetSuperChatMessage() *SuperChatMessage {
	if x, ok := x.GetEventPayload().(*RecordEventRequest_SuperChatMessage); ok {
		return x.SuperChatMessage
	}
	return nil
}

func (x *RecordEventRequest) GetWatchedCountUpdate() *WatchedCountUpdate {
	if x, ok := x.GetEventPayload().(*RecordEventRequest_WatchedCountUpdate); ok {
		return x.WatchedCountUpdate
	}
	return nil
}

func (x *RecordEventRequest) GetLikeCountUpdate() *LikeCountUpdate {
	if x, ok := x.GetEventPayload().(*RecordEventRequest_LikeCountUpdate); ok {
		return x.LikeCountUpdate
	}
	return nil
}

func (x *RecordEventRequest) GetOnlineRankUpdate() *OnlineRankUpdate {
	if x, ok := x.GetEventPayload().(*RecordEventRequest_OnlineRankUpdate); ok {
		return x.OnlineRankUpdate
	}
	return nil
}

func (x *RecordEventRequest) GetUserInteraction() *UserInteraction {
	if x, ok := x.GetEventPayload().(*RecordEventRequest_UserInteraction); ok {
		return x.UserInteraction
	}
	return nil
}

func (x *RecordEventRequest) GetPlatformRoomInfoUpdated() *PlatformRoomInfoUpdated {
	if x, ok := x.GetEventPayload().(*RecordEventRequest_PlatformRoomInfoUpdated); ok {
		return x.PlatformRoomInfoUpdated
	}
	return nil
}

type isRecordEventRequest_EventPayload interface {
	isRecordEventRequest_EventPayload()
}

type RecordEventRequest_ChatMessage struct {
	ChatMessage *ChatMessage `protobuf:"bytes,2,opt,name=chat_message,json=chatMessage,proto3,oneof"`
}

type RecordEventRequest_UserPresence struct {
	UserPresence *UserPresence `protobuf:"bytes,3,opt,name=user_presence,json=userPresence,proto3,oneof"`
}

type RecordEventRequest_StreamStatus struct {
	StreamStatus *StreamStatus `protobuf:"bytes,4,opt,name=stream_status,json=streamStatus,proto3,oneof"`
}

type RecordEventRequest_GiftSent struct {
	GiftSent *GiftSent `protobuf:"bytes,5,opt,name=gift_sent,json=giftSent,proto3,oneof"` // 新增：礼物赠送
}

type RecordEventRequest_GuardPurchase struct {
	GuardPurchase *GuardPurchase `protobuf:"bytes,6,opt,name=guard_purchase,json=guardPurchase,proto3,oneof"` // 新增：大航海购买
}

type RecordEventRequest_SuperChatMessage struct {
	SuperChatMessage *SuperChatMessage `protobuf:"bytes,7,opt,name=super_chat_message,json=superChatMessage,proto3,oneof"` // 新增：醒目留言
}

type RecordEventRequest_WatchedCountUpdate struct {
	WatchedCountUpdate *WatchedCountUpdate `protobuf:"bytes,8,opt,name=watched_count_update,json=watchedCountUpdate,proto3,oneof"` // 新增：观看人数更新
}

type RecordEventRequest_LikeCountUpdate struct {
	LikeCountUpdate *LikeCountUpdate `protobuf:"bytes,9,opt,name=like_count_update,json=likeCountUpdate,proto3,oneof"` // 新增：点赞数更新
}

type RecordEventRequest_OnlineRankUpdate struct {
	OnlineRankUpdate *OnlineRankUpdate `protobuf:"bytes,10,opt,name=online_rank_update,json=onlineRankUpdate,proto3,oneof"` // 新增：高能榜更新
}

type RecordEventRequest_UserInteraction struct {
	UserInteraction *UserInteraction `protobuf:"bytes,11,opt,name=user_interaction,json=userInteraction,proto3,oneof"` // 新增：用户互动 (关注/分享)
}

type RecordEventRequest_PlatformRoomInfoUpdated struct {
	PlatformRoomInfoUpdated *PlatformRoomInfoUpdated `protobuf:"bytes,12,opt,name=platform_room_info_updated,json=platformRoomInfoUpdated,proto3,oneof"` // 新增: 平台房间信息更新
}

func (*RecordEventRequest_ChatMessage) isRecordEventRequest_EventPayload() {}

func (*RecordEventRequest_UserPresence) isRecordEventRequest_EventPayload() {}

func (*RecordEventRequest_StreamStatus) isRecordEventRequest_EventPayload() {}

func (*RecordEventRequest_GiftSent) isRecordEventRequest_EventPayload() {}

func (*RecordEventRequest_GuardPurchase) isRecordEventRequest_EventPayload() {}

func (*RecordEventRequest_SuperChatMessage) isRecordEventRequest_EventPayload() {}

func (*RecordEventRequest_WatchedCountUpdate) isRecordEventRequest_EventPayload() {}

func (*RecordEventRequest_LikeCountUpdate) isRecordEventRequest_EventPayload() {}

func (*RecordEventRequest_OnlineRankUpdate) isRecordEventRequest_EventPayload() {}

func (*RecordEventRequest_UserInteraction) isRecordEventRequest_EventPayload() {}

func (*RecordEventRequest_PlatformRoomInfoUpdated) isRecordEventRequest_EventPayload() {}

// 通用事件记录响应
type RecordEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success      bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	EventId      string `protobuf:"bytes,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	ErrorMessage string `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *RecordEventResponse) Reset() {
	*x = RecordEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_v1_event_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordEventResponse) ProtoMessage() {}

func (x *RecordEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_event_v1_event_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordEventResponse.ProtoReflect.Descriptor instead.
func (*RecordEventResponse) Descriptor() ([]byte, []int) {
	return file_event_v1_event_proto_rawDescGZIP(), []int{1}
}

func (x *RecordEventResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RecordEventResponse) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *RecordEventResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// 聊天消息事件
type ChatMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId           string                 `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`           // 消息的唯一 ID
	SessionId           string                 `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`           // 消息所属的直播场次 ID (如果 is_during_live_session 为 false，则可能为空)
	RoomId              string                 `protobuf:"bytes,3,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`                    // 消息所属的房间 ID
	UserId              string                 `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                    // 发送消息的用户 ID
	UserLevel           int32                  `protobuf:"varint,9,opt,name=user_level,json=userLevel,proto3" json:"user_level,omitempty"`          //用户等级
	Username            string                 `protobuf:"bytes,10,opt,name=username,proto3" json:"username,omitempty"`                             // 发送消息的用户名 (Standardized)
	Admin               bool                   `protobuf:"varint,8,opt,name=admin,proto3" json:"admin,omitempty"`                                   //是否为管理员
	MobileVerify        bool                   `protobuf:"varint,7,opt,name=mobile_verify,json=mobileVerify,proto3" json:"mobile_verify,omitempty"` //是否绑定手机
	GuardLevel          int32                  `protobuf:"varint,11,opt,name=guard_level,json=guardLevel,proto3" json:"guard_level,omitempty"`      //大航海等级
	Content             string                 `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`                                // 消息内容
	Medal               *Medal                 `protobuf:"bytes,12,opt,name=medal,proto3" json:"medal,omitempty"`
	Timestamp           *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                                      // 消息发送时间
	RawMsg              string                 `protobuf:"bytes,13,opt,name=raw_msg,json=rawMsg,proto3" json:"raw_msg,omitempty"`                                             // 原始消息
	IsDuringLiveSession bool                   `protobuf:"varint,14,opt,name=is_during_live_session,json=isDuringLiveSession,proto3" json:"is_during_live_session,omitempty"` // 标识事件是否发生在已知的活跃会话期间
}

func (x *ChatMessage) Reset() {
	*x = ChatMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_v1_event_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMessage) ProtoMessage() {}

func (x *ChatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_event_v1_event_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMessage.ProtoReflect.Descriptor instead.
func (*ChatMessage) Descriptor() ([]byte, []int) {
	return file_event_v1_event_proto_rawDescGZIP(), []int{2}
}

func (x *ChatMessage) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *ChatMessage) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *ChatMessage) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *ChatMessage) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ChatMessage) GetUserLevel() int32 {
	if x != nil {
		return x.UserLevel
	}
	return 0
}

func (x *ChatMessage) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ChatMessage) GetAdmin() bool {
	if x != nil {
		return x.Admin
	}
	return false
}

func (x *ChatMessage) GetMobileVerify() bool {
	if x != nil {
		return x.MobileVerify
	}
	return false
}

func (x *ChatMessage) GetGuardLevel() int32 {
	if x != nil {
		return x.GuardLevel
	}
	return 0
}

func (x *ChatMessage) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ChatMessage) GetMedal() *Medal {
	if x != nil {
		return x.Medal
	}
	return nil
}

func (x *ChatMessage) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ChatMessage) GetRawMsg() string {
	if x != nil {
		return x.RawMsg
	}
	return ""
}

func (x *ChatMessage) GetIsDuringLiveSession() bool {
	if x != nil {
		return x.IsDuringLiveSession
	}
	return false
}

// 勋章
type Medal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedalUpname   string `protobuf:"bytes,1,opt,name=medal_upname,json=medalUpname,proto3" json:"medal_upname,omitempty"`        // 勋章上主播昵称
	MedalName     string `protobuf:"bytes,2,opt,name=medal_name,json=medalName,proto3" json:"medal_name,omitempty"`              // 勋章名称
	MedalLevel    int32  `protobuf:"varint,3,opt,name=medal_level,json=medalLevel,proto3" json:"medal_level,omitempty"`          // 勋章等级
	MedalColor    int32  `protobuf:"varint,4,opt,name=medal_color,json=medalColor,proto3" json:"medal_color,omitempty"`          // 勋章颜色
	MedalUproomid int32  `protobuf:"varint,5,opt,name=medal_uproomid,json=medalUproomid,proto3" json:"medal_uproomid,omitempty"` // 勋章上主播房间id
	MedalUpuid    int32  `protobuf:"varint,6,opt,name=medal_upuid,json=medalUpuid,proto3" json:"medal_upuid,omitempty"`          // 勋章主播id
}

func (x *Medal) Reset() {
	*x = Medal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_v1_event_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Medal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Medal) ProtoMessage() {}

func (x *Medal) ProtoReflect() protoreflect.Message {
	mi := &file_event_v1_event_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Medal.ProtoReflect.Descriptor instead.
func (*Medal) Descriptor() ([]byte, []int) {
	return file_event_v1_event_proto_rawDescGZIP(), []int{3}
}

func (x *Medal) GetMedalUpname() string {
	if x != nil {
		return x.MedalUpname
	}
	return ""
}

func (x *Medal) GetMedalName() string {
	if x != nil {
		return x.MedalName
	}
	return ""
}

func (x *Medal) GetMedalLevel() int32 {
	if x != nil {
		return x.MedalLevel
	}
	return 0
}

func (x *Medal) GetMedalColor() int32 {
	if x != nil {
		return x.MedalColor
	}
	return 0
}

func (x *Medal) GetMedalUproomid() int32 {
	if x != nil {
		return x.MedalUproomid
	}
	return 0
}

func (x *Medal) GetMedalUpuid() int32 {
	if x != nil {
		return x.MedalUpuid
	}
	return 0
}

// 用户状态事件 (进入/离开)
type UserPresence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId           string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`                                    // 事件发生的直播场次 ID (如果 is_during_live_session 为 false，则可能为空)
	RoomId              string                 `protobuf:"bytes,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`                                             // 事件发生的房间 ID
	UserId              string                 `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                             // 进入或离开的用户 ID
	Username            string                 `protobuf:"bytes,10,opt,name=username,proto3" json:"username,omitempty"`                                                      // 进入或离开的用户名 (Standardized)
	Entered             bool                   `protobuf:"varint,4,opt,name=entered,proto3" json:"entered,omitempty"`                                                        // true 表示进入，false 表示离开
	Timestamp           *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                                     // 事件发生时间
	IsDuringLiveSession bool                   `protobuf:"varint,6,opt,name=is_during_live_session,json=isDuringLiveSession,proto3" json:"is_during_live_session,omitempty"` // 标识事件是否发生在已知的活跃会话期间
}

func (x *UserPresence) Reset() {
	*x = UserPresence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_v1_event_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPresence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPresence) ProtoMessage() {}

func (x *UserPresence) ProtoReflect() protoreflect.Message {
	mi := &file_event_v1_event_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPresence.ProtoReflect.Descriptor instead.
func (*UserPresence) Descriptor() ([]byte, []int) {
	return file_event_v1_event_proto_rawDescGZIP(), []int{4}
}

func (x *UserPresence) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *UserPresence) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *UserPresence) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserPresence) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserPresence) GetEntered() bool {
	if x != nil {
		return x.Entered
	}
	return false
}

func (x *UserPresence) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *UserPresence) GetIsDuringLiveSession() bool {
	if x != nil {
		return x.IsDuringLiveSession
	}
	return false
}

// 直播流状态事件 (开始/结束) - 这个事件本身定义了直播状态，不需要额外字段
type StreamStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"` // 事件发生的直播场次 ID
	RoomId    string                 `protobuf:"bytes,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`          // 事件发生的房间 ID
	IsLive    bool                   `protobuf:"varint,3,opt,name=is_live,json=isLive,proto3" json:"is_live,omitempty"`         // true 表示直播开始，false 表示直播结束
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                  // 事件发生时间
}

func (x *StreamStatus) Reset() {
	*x = StreamStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_v1_event_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamStatus) ProtoMessage() {}

func (x *StreamStatus) ProtoReflect() protoreflect.Message {
	mi := &file_event_v1_event_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamStatus.ProtoReflect.Descriptor instead.
func (*StreamStatus) Descriptor() ([]byte, []int) {
	return file_event_v1_event_proto_rawDescGZIP(), []int{5}
}

func (x *StreamStatus) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *StreamStatus) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *StreamStatus) GetIsLive() bool {
	if x != nil {
		return x.IsLive
	}
	return false
}

func (x *StreamStatus) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// 礼物赠送事件
type GiftSent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId             string                 `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`                                           // 事件唯一 ID (例如 B站的 tid 或 combo_id)
	SessionId           string                 `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`                                     // 事件发生的直播场次 ID (如果 is_during_live_session 为 false，则可能为空)
	RoomId              string                 `protobuf:"bytes,3,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`                                              // 事件发生的房间 ID
	UserId              string                 `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                              // 送礼用户 ID
	Username            string                 `protobuf:"bytes,5,opt,name=username,proto3" json:"username,omitempty"`                                                        // 送礼用户名 (Standardized)
	GiftId              string                 `protobuf:"bytes,6,opt,name=gift_id,json=giftId,proto3" json:"gift_id,omitempty"`                                              // 礼物 ID
	GiftName            string                 `protobuf:"bytes,7,opt,name=gift_name,json=giftName,proto3" json:"gift_name,omitempty"`                                        // 礼物名称
	GiftCount           int32                  `protobuf:"varint,8,opt,name=gift_count,json=giftCount,proto3" json:"gift_count,omitempty"`                                    // 礼物数量
	TotalCoin           int64                  `protobuf:"varint,9,opt,name=total_coin,json=totalCoin,proto3" json:"total_coin,omitempty"`                                    // 礼物总价值 (平台货币，如金/银瓜子)
	CoinType            string                 `protobuf:"bytes,11,opt,name=coin_type,json=coinType,proto3" json:"coin_type,omitempty"`                                       // 平台货币类型 (例如 "gold", "silver")
	Timestamp           *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                                     // 事件发生时间
	IsDuringLiveSession bool                   `protobuf:"varint,12,opt,name=is_during_live_session,json=isDuringLiveSession,proto3" json:"is_during_live_session,omitempty"` // 标识事件是否发生在已知的活跃会话期间
}

func (x *GiftSent) Reset() {
	*x = GiftSent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_v1_event_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GiftSent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GiftSent) ProtoMessage() {}

func (x *GiftSent) ProtoReflect() protoreflect.Message {
	mi := &file_event_v1_event_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GiftSent.ProtoReflect.Descriptor instead.
func (*GiftSent) Descriptor() ([]byte, []int) {
	return file_event_v1_event_proto_rawDescGZIP(), []int{6}
}

func (x *GiftSent) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *GiftSent) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *GiftSent) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *GiftSent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GiftSent) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *GiftSent) GetGiftId() string {
	if x != nil {
		return x.GiftId
	}
	return ""
}

func (x *GiftSent) GetGiftName() string {
	if x != nil {
		return x.GiftName
	}
	return ""
}

func (x *GiftSent) GetGiftCount() int32 {
	if x != nil {
		return x.GiftCount
	}
	return 0
}

func (x *GiftSent) GetTotalCoin() int64 {
	if x != nil {
		return x.TotalCoin
	}
	return 0
}

func (x *GiftSent) GetCoinType() string {
	if x != nil {
		return x.CoinType
	}
	return ""
}

func (x *GiftSent) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *GiftSent) GetIsDuringLiveSession() bool {
	if x != nil {
		return x.IsDuringLiveSession
	}
	return false
}

// 大航海购买事件 (上舰/提督/总督)
type GuardPurchase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId             string                 `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`                                           // 事件唯一 ID (可以使用 B站的 payflow_id 或组合生成)
	SessionId           string                 `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`                                     // 事件发生的直播场次 ID (如果 is_during_live_session 为 false，则可能为空)
	RoomId              string                 `protobuf:"bytes,3,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`                                              // 事件发生的房间 ID
	UserId              string                 `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                              // 购买用户 ID
	Username            string                 `protobuf:"bytes,5,opt,name=username,proto3" json:"username,omitempty"`                                                        // 购买用户名 (Standardized)
	GuardLevel          int32                  `protobuf:"varint,6,opt,name=guard_level,json=guardLevel,proto3" json:"guard_level,omitempty"`                                 // 大航海等级 (例如 B站: 1-总督, 2-提督, 3-舰长)
	GuardName           string                 `protobuf:"bytes,7,opt,name=guard_name,json=guardName,proto3" json:"guard_name,omitempty"`                                     // 等级名称 (例如 "总督", "提督", "舰长")
	Count               int32                  `protobuf:"varint,8,opt,name=count,proto3" json:"count,omitempty"`                                                             // 购买数量 (通常为 1)
	Price               int64                  `protobuf:"varint,9,opt,name=price,proto3" json:"price,omitempty"`                                                             // 价格 (平台货币，如金瓜子)
	Timestamp           *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                                     // 事件发生时间
	IsDuringLiveSession bool                   `protobuf:"varint,11,opt,name=is_during_live_session,json=isDuringLiveSession,proto3" json:"is_during_live_session,omitempty"` // 标识事件是否发生在已知的活跃会话期间
}

func (x *GuardPurchase) Reset() {
	*x = GuardPurchase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_v1_event_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuardPurchase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuardPurchase) ProtoMessage() {}

func (x *GuardPurchase) ProtoReflect() protoreflect.Message {
	mi := &file_event_v1_event_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuardPurchase.ProtoReflect.Descriptor instead.
func (*GuardPurchase) Descriptor() ([]byte, []int) {
	return file_event_v1_event_proto_rawDescGZIP(), []int{7}
}

func (x *GuardPurchase) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *GuardPurchase) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *GuardPurchase) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *GuardPurchase) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GuardPurchase) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *GuardPurchase) GetGuardLevel() int32 {
	if x != nil {
		return x.GuardLevel
	}
	return 0
}

func (x *GuardPurchase) GetGuardName() string {
	if x != nil {
		return x.GuardName
	}
	return ""
}

func (x *GuardPurchase) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GuardPurchase) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *GuardPurchase) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *GuardPurchase) GetIsDuringLiveSession() bool {
	if x != nil {
		return x.IsDuringLiveSession
	}
	return false
}

// 醒目留言事件
type SuperChatMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId           string                 `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`                                     // SC 消息 ID (例如 B站的 id 字段)
	SessionId           string                 `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`                                     // 事件发生的直播场次 ID (如果 is_during_live_session 为 false，则可能为空)
	RoomId              string                 `protobuf:"bytes,3,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`                                              // 事件发生的房间 ID
	UserId              string                 `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                              // 发送用户 ID
	Username            string                 `protobuf:"bytes,5,opt,name=username,proto3" json:"username,omitempty"`                                                        // 发送用户名 (Standardized)
	Content             string                 `protobuf:"bytes,6,opt,name=content,proto3" json:"content,omitempty"`                                                          // SC 内容
	Price               int64                  `protobuf:"varint,7,opt,name=price,proto3" json:"price,omitempty"`                                                             // SC 金额 (通常为法币，如 CNY)
	Duration            int32                  `protobuf:"varint,8,opt,name=duration,proto3" json:"duration,omitempty"`                                                       // SC 持续时间 (秒)
	Timestamp           *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                                      // 事件发生时间
	IsDuringLiveSession bool                   `protobuf:"varint,10,opt,name=is_during_live_session,json=isDuringLiveSession,proto3" json:"is_during_live_session,omitempty"` // 标识事件是否发生在已知的活跃会话期间
}

func (x *SuperChatMessage) Reset() {
	*x = SuperChatMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_v1_event_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuperChatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuperChatMessage) ProtoMessage() {}

func (x *SuperChatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_event_v1_event_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuperChatMessage.ProtoReflect.Descriptor instead.
func (*SuperChatMessage) Descriptor() ([]byte, []int) {
	return file_event_v1_event_proto_rawDescGZIP(), []int{8}
}

func (x *SuperChatMessage) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *SuperChatMessage) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *SuperChatMessage) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *SuperChatMessage) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SuperChatMessage) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *SuperChatMessage) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SuperChatMessage) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SuperChatMessage) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *SuperChatMessage) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *SuperChatMessage) GetIsDuringLiveSession() bool {
	if x != nil {
		return x.IsDuringLiveSession
	}
	return false
}

// 观看人数更新事件
type WatchedCountUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId           string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`                                    // 事件发生的直播场次 ID (如果 is_during_live_session 为 false，则可能为空)
	RoomId              string                 `protobuf:"bytes,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`                                             // 事件发生的房间 ID
	Count               int64                  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`                                                            // 当前累计观看人数
	TextLarge           string                 `protobuf:"bytes,4,opt,name=text_large,json=textLarge,proto3" json:"text_large,omitempty"`                                    // (可选) 平台提供的显示文本 (例如 "1.7万人看过")
	Timestamp           *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                                     // 事件发生时间
	IsDuringLiveSession bool                   `protobuf:"varint,6,opt,name=is_during_live_session,json=isDuringLiveSession,proto3" json:"is_during_live_session,omitempty"` // 标识事件是否发生在已知的活跃会话期间
}

func (x *WatchedCountUpdate) Reset() {
	*x = WatchedCountUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_v1_event_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchedCountUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchedCountUpdate) ProtoMessage() {}

func (x *WatchedCountUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_event_v1_event_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchedCountUpdate.ProtoReflect.Descriptor instead.
func (*WatchedCountUpdate) Descriptor() ([]byte, []int) {
	return file_event_v1_event_proto_rawDescGZIP(), []int{9}
}

func (x *WatchedCountUpdate) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *WatchedCountUpdate) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *WatchedCountUpdate) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *WatchedCountUpdate) GetTextLarge() string {
	if x != nil {
		return x.TextLarge
	}
	return ""
}

func (x *WatchedCountUpdate) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *WatchedCountUpdate) GetIsDuringLiveSession() bool {
	if x != nil {
		return x.IsDuringLiveSession
	}
	return false
}

// 点赞数更新事件
type LikeCountUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId           string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`                                    // 事件发生的直播场次 ID (如果 is_during_live_session 为 false，则可能为空)
	RoomId              string                 `protobuf:"bytes,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`                                             // 事件发生的房间 ID
	Count               int64                  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`                                                            // 当前累计点赞数
	Timestamp           *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                                     // 事件发生时间
	IsDuringLiveSession bool                   `protobuf:"varint,5,opt,name=is_during_live_session,json=isDuringLiveSession,proto3" json:"is_during_live_session,omitempty"` // 标识事件是否发生在已知的活跃会话期间
}

func (x *LikeCountUpdate) Reset() {
	*x = LikeCountUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_v1_event_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LikeCountUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikeCountUpdate) ProtoMessage() {}

func (x *LikeCountUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_event_v1_event_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikeCountUpdate.ProtoReflect.Descriptor instead.
func (*LikeCountUpdate) Descriptor() ([]byte, []int) {
	return file_event_v1_event_proto_rawDescGZIP(), []int{10}
}

func (x *LikeCountUpdate) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *LikeCountUpdate) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *LikeCountUpdate) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *LikeCountUpdate) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *LikeCountUpdate) GetIsDuringLiveSession() bool {
	if x != nil {
		return x.IsDuringLiveSession
	}
	return false
}

// 在线观众
type OnlineRankCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *OnlineRankCount) Reset() {
	*x = OnlineRankCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_v1_event_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnlineRankCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnlineRankCount) ProtoMessage() {}

func (x *OnlineRankCount) ProtoReflect() protoreflect.Message {
	mi := &file_event_v1_event_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnlineRankCount.ProtoReflect.Descriptor instead.
func (*OnlineRankCount) Descriptor() ([]byte, []int) {
	return file_event_v1_event_proto_rawDescGZIP(), []int{11}
}

func (x *OnlineRankCount) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

// 高能榜更新事件 (简化版，只记录 Top N)
type OnlineRankUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId           string                       `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`                                    // 事件发生的直播场次 ID (如果 is_during_live_session 为 false，则可能为空)
	RoomId              string                       `protobuf:"bytes,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`                                             // 事件发生的房间 ID
	TopUsers            []*OnlineRankUpdate_RankUser `protobuf:"bytes,3,rep,name=top_users,json=topUsers,proto3" json:"top_users,omitempty"`                                       // 高能榜 Top N 用户列表
	TotalCount          int64                        `protobuf:"varint,4,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`                                // (可选) 高能榜总人数 (如果平台提供)
	Timestamp           *timestamppb.Timestamp       `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                                     // 事件发生时间
	IsDuringLiveSession bool                         `protobuf:"varint,6,opt,name=is_during_live_session,json=isDuringLiveSession,proto3" json:"is_during_live_session,omitempty"` // 标识事件是否发生在已知的活跃会话期间
}

func (x *OnlineRankUpdate) Reset() {
	*x = OnlineRankUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_v1_event_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnlineRankUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnlineRankUpdate) ProtoMessage() {}

func (x *OnlineRankUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_event_v1_event_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnlineRankUpdate.ProtoReflect.Descriptor instead.
func (*OnlineRankUpdate) Descriptor() ([]byte, []int) {
	return file_event_v1_event_proto_rawDescGZIP(), []int{12}
}

func (x *OnlineRankUpdate) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *OnlineRankUpdate) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *OnlineRankUpdate) GetTopUsers() []*OnlineRankUpdate_RankUser {
	if x != nil {
		return x.TopUsers
	}
	return nil
}

func (x *OnlineRankUpdate) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *OnlineRankUpdate) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *OnlineRankUpdate) GetIsDuringLiveSession() bool {
	if x != nil {
		return x.IsDuringLiveSession
	}
	return false
}

// 用户互动事件 (关注/分享)
type UserInteraction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId             string                          `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`                                          // 事件唯一 ID
	SessionId           string                          `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`                                    // 事件发生的直播场次 ID (如果 is_during_live_session 为 false，则可能为空)
	RoomId              string                          `protobuf:"bytes,3,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`                                             // 事件发生的房间 ID
	UserId              string                          `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                             // 互动用户 ID
	Username            string                          `protobuf:"bytes,5,opt,name=username,proto3" json:"username,omitempty"`                                                       // 互动用户名 (Standardized)
	Type                UserInteraction_InteractionType `protobuf:"varint,6,opt,name=type,proto3,enum=event.v1.UserInteraction_InteractionType" json:"type,omitempty"`                // 互动类型
	Timestamp           *timestamppb.Timestamp          `protobuf:"bytes,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                                     // 事件发生时间
	IsDuringLiveSession bool                            `protobuf:"varint,8,opt,name=is_during_live_session,json=isDuringLiveSession,proto3" json:"is_during_live_session,omitempty"` // 标识事件是否发生在已知的活跃会话期间
}

func (x *UserInteraction) Reset() {
	*x = UserInteraction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_v1_event_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInteraction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInteraction) ProtoMessage() {}

func (x *UserInteraction) ProtoReflect() protoreflect.Message {
	mi := &file_event_v1_event_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInteraction.ProtoReflect.Descriptor instead.
func (*UserInteraction) Descriptor() ([]byte, []int) {
	return file_event_v1_event_proto_rawDescGZIP(), []int{13}
}

func (x *UserInteraction) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *UserInteraction) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *UserInteraction) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *UserInteraction) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserInteraction) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserInteraction) GetType() UserInteraction_InteractionType {
	if x != nil {
		return x.Type
	}
	return UserInteraction_UNKNOWN
}

func (x *UserInteraction) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *UserInteraction) GetIsDuringLiveSession() bool {
	if x != nil {
		return x.IsDuringLiveSession
	}
	return false
}

// 新增: 平台房间信息更新事件 (由 Adapter 发布) - 这个事件本身定义了直播状态，不需要额外字段
type PlatformRoomInfoUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId         string                 `protobuf:"bytes,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`                           // 我们系统内部的 Room ID
	Platform       string                 `protobuf:"bytes,2,opt,name=platform,proto3" json:"platform,omitempty"`                                     // 平台名称 (例如 "bilibili")
	PlatformRoomId string                 `protobuf:"bytes,3,opt,name=platform_room_id,json=platformRoomId,proto3" json:"platform_room_id,omitempty"` // 平台原始房间 ID
	RoomName       string                 `protobuf:"bytes,4,opt,name=room_name,json=roomName,proto3" json:"room_name,omitempty"`                     // 从平台获取的最新房间标题 (Standardized)
	AreaName       string                 `protobuf:"bytes,5,opt,name=area_name,json=areaName,proto3" json:"area_name,omitempty"`                     // 从平台获取的最新分区名称
	Timestamp      *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                   // 事件发生时间
	LiveStatus     int32                  `protobuf:"varint,7,opt,name=live_status,json=liveStatus,proto3" json:"live_status,omitempty"`              // 从平台获取的直播状态 (例如 Bilibili: 0=未开播, 1=直播中, 2=轮播中)
}

func (x *PlatformRoomInfoUpdated) Reset() {
	*x = PlatformRoomInfoUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_v1_event_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlatformRoomInfoUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlatformRoomInfoUpdated) ProtoMessage() {}

func (x *PlatformRoomInfoUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_event_v1_event_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlatformRoomInfoUpdated.ProtoReflect.Descriptor instead.
func (*PlatformRoomInfoUpdated) Descriptor() ([]byte, []int) {
	return file_event_v1_event_proto_rawDescGZIP(), []int{14}
}

func (x *PlatformRoomInfoUpdated) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *PlatformRoomInfoUpdated) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *PlatformRoomInfoUpdated) GetPlatformRoomId() string {
	if x != nil {
		return x.PlatformRoomId
	}
	return ""
}

func (x *PlatformRoomInfoUpdated) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (x *PlatformRoomInfoUpdated) GetAreaName() string {
	if x != nil {
		return x.AreaName
	}
	return ""
}

func (x *PlatformRoomInfoUpdated) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *PlatformRoomInfoUpdated) GetLiveStatus() int32 {
	if x != nil {
		return x.LiveStatus
	}
	return 0
}

// 获取会话事件请求
type GetAllSessionEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId           string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Timestamp           *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                                     // 事件发生时间
	IsDuringLiveSession bool                   `protobuf:"varint,3,opt,name=is_during_live_session,json=isDuringLiveSession,proto3" json:"is_during_live_session,omitempty"` // 标识事件是否发生在已知的活跃会话期间
}

func (x *GetAllSessionEventsRequest) Reset() {
	*x = GetAllSessionEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_v1_event_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllSessionEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllSessionEventsRequest) ProtoMessage() {}

func (x *GetAllSessionEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_event_v1_event_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllSessionEventsRequest.ProtoReflect.Descriptor instead.
func (*GetAllSessionEventsRequest) Descriptor() ([]byte, []int) {
	return file_event_v1_event_proto_rawDescGZIP(), []int{15}
}

func (x *GetAllSessionEventsRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *GetAllSessionEventsRequest) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *GetAllSessionEventsRequest) GetIsDuringLiveSession() bool {
	if x != nil {
		return x.IsDuringLiveSession
	}
	return false
}

// 获取会话事件响应
type GetAllSessionEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 直接返回各类事件数组
	ChatMessages             []*ChatMessage             `protobuf:"bytes,1,rep,name=chat_messages,json=chatMessages,proto3" json:"chat_messages,omitempty"`
	GiftSents                []*GiftSent                `protobuf:"bytes,2,rep,name=gift_sents,json=giftSents,proto3" json:"gift_sents,omitempty"`
	UserPresences            []*UserPresence            `protobuf:"bytes,3,rep,name=user_presences,json=userPresences,proto3" json:"user_presences,omitempty"`
	StreamStatuses           []*StreamStatus            `protobuf:"bytes,4,rep,name=stream_statuses,json=streamStatuses,proto3" json:"stream_statuses,omitempty"`
	LikeCountUpdates         []*LikeCountUpdate         `protobuf:"bytes,5,rep,name=like_count_updates,json=likeCountUpdates,proto3" json:"like_count_updates,omitempty"`
	UserInteractions         []*UserInteraction         `protobuf:"bytes,6,rep,name=user_interactions,json=userInteractions,proto3" json:"user_interactions,omitempty"`
	PlatformRoomInfoUpdateds []*PlatformRoomInfoUpdated `protobuf:"bytes,7,rep,name=platform_room_info_updateds,json=platformRoomInfoUpdateds,proto3" json:"platform_room_info_updateds,omitempty"`
	OnlineRankUpdates        []*OnlineRankUpdate        `protobuf:"bytes,8,rep,name=online_rank_updates,json=onlineRankUpdates,proto3" json:"online_rank_updates,omitempty"`
	WatchedCountUpdates      []*WatchedCountUpdate      `protobuf:"bytes,9,rep,name=watched_count_updates,json=watchedCountUpdates,proto3" json:"watched_count_updates,omitempty"`
	SuperChatMessages        []*SuperChatMessage        `protobuf:"bytes,10,rep,name=super_chat_messages,json=superChatMessages,proto3" json:"super_chat_messages,omitempty"`
	GuardPurchases           []*GuardPurchase           `protobuf:"bytes,11,rep,name=guard_purchases,json=guardPurchases,proto3" json:"guard_purchases,omitempty"`
}

func (x *GetAllSessionEventsResponse) Reset() {
	*x = GetAllSessionEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_v1_event_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllSessionEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllSessionEventsResponse) ProtoMessage() {}

func (x *GetAllSessionEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_event_v1_event_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllSessionEventsResponse.ProtoReflect.Descriptor instead.
func (*GetAllSessionEventsResponse) Descriptor() ([]byte, []int) {
	return file_event_v1_event_proto_rawDescGZIP(), []int{16}
}

func (x *GetAllSessionEventsResponse) GetChatMessages() []*ChatMessage {
	if x != nil {
		return x.ChatMessages
	}
	return nil
}

func (x *GetAllSessionEventsResponse) GetGiftSents() []*GiftSent {
	if x != nil {
		return x.GiftSents
	}
	return nil
}

func (x *GetAllSessionEventsResponse) GetUserPresences() []*UserPresence {
	if x != nil {
		return x.UserPresences
	}
	return nil
}

func (x *GetAllSessionEventsResponse) GetStreamStatuses() []*StreamStatus {
	if x != nil {
		return x.StreamStatuses
	}
	return nil
}

func (x *GetAllSessionEventsResponse) GetLikeCountUpdates() []*LikeCountUpdate {
	if x != nil {
		return x.LikeCountUpdates
	}
	return nil
}

func (x *GetAllSessionEventsResponse) GetUserInteractions() []*UserInteraction {
	if x != nil {
		return x.UserInteractions
	}
	return nil
}

func (x *GetAllSessionEventsResponse) GetPlatformRoomInfoUpdateds() []*PlatformRoomInfoUpdated {
	if x != nil {
		return x.PlatformRoomInfoUpdateds
	}
	return nil
}

func (x *GetAllSessionEventsResponse) GetOnlineRankUpdates() []*OnlineRankUpdate {
	if x != nil {
		return x.OnlineRankUpdates
	}
	return nil
}

func (x *GetAllSessionEventsResponse) GetWatchedCountUpdates() []*WatchedCountUpdate {
	if x != nil {
		return x.WatchedCountUpdates
	}
	return nil
}

func (x *GetAllSessionEventsResponse) GetSuperChatMessages() []*SuperChatMessage {
	if x != nil {
		return x.SuperChatMessages
	}
	return nil
}

func (x *GetAllSessionEventsResponse) GetGuardPurchases() []*GuardPurchase {
	if x != nil {
		return x.GuardPurchases
	}
	return nil
}

// 在线排名人数更新事件 (来自 ONLINE_RANK_COUNT cmd)
type OnlineRankCountUpdatedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId           string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`                                    // 事件发生的直播场次 ID (如果 is_during_live_session 为 false，则可能为空)
	RoomId              string                 `protobuf:"bytes,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`                                             // 事件发生的房间 ID
	Count               int64                  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`                                                            // 当前在线排名人数
	Timestamp           *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                                     // 事件发生时间
	IsDuringLiveSession bool                   `protobuf:"varint,5,opt,name=is_during_live_session,json=isDuringLiveSession,proto3" json:"is_during_live_session,omitempty"` // 标识事件是否发生在已知的活跃会话期间
}

func (x *OnlineRankCountUpdatedEvent) Reset() {
	*x = OnlineRankCountUpdatedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_v1_event_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnlineRankCountUpdatedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnlineRankCountUpdatedEvent) ProtoMessage() {}

func (x *OnlineRankCountUpdatedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_event_v1_event_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnlineRankCountUpdatedEvent.ProtoReflect.Descriptor instead.
func (*OnlineRankCountUpdatedEvent) Descriptor() ([]byte, []int) {
	return file_event_v1_event_proto_rawDescGZIP(), []int{17}
}

func (x *OnlineRankCountUpdatedEvent) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *OnlineRankCountUpdatedEvent) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *OnlineRankCountUpdatedEvent) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *OnlineRankCountUpdatedEvent) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *OnlineRankCountUpdatedEvent) GetIsDuringLiveSession() bool {
	if x != nil {
		return x.IsDuringLiveSession
	}
	return false
}

type OnlineRankUpdate_RankUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`    // 上榜用户 ID
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`              // 上榜用户名 (Standardized)
	Rank     int32  `protobuf:"varint,3,opt,name=rank,proto3" json:"rank,omitempty"`                     // 排名
	Score    string `protobuf:"bytes,4,opt,name=score,proto3" json:"score,omitempty"`                    // 贡献值/分数 (字符串类型以兼容不同平台)
	FaceUrl  string `protobuf:"bytes,5,opt,name=face_url,json=faceUrl,proto3" json:"face_url,omitempty"` // (可选) 用户头像 URL
}

func (x *OnlineRankUpdate_RankUser) Reset() {
	*x = OnlineRankUpdate_RankUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_v1_event_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnlineRankUpdate_RankUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnlineRankUpdate_RankUser) ProtoMessage() {}

func (x *OnlineRankUpdate_RankUser) ProtoReflect() protoreflect.Message {
	mi := &file_event_v1_event_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnlineRankUpdate_RankUser.ProtoReflect.Descriptor instead.
func (*OnlineRankUpdate_RankUser) Descriptor() ([]byte, []int) {
	return file_event_v1_event_proto_rawDescGZIP(), []int{12, 0}
}

func (x *OnlineRankUpdate_RankUser) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *OnlineRankUpdate_RankUser) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *OnlineRankUpdate_RankUser) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *OnlineRankUpdate_RankUser) GetScore() string {
	if x != nil {
		return x.Score
	}
	return ""
}

func (x *OnlineRankUpdate_RankUser) GetFaceUrl() string {
	if x != nil {
		return x.FaceUrl
	}
	return ""
}

var File_event_v1_event_proto protoreflect.FileDescriptor

var file_event_v1_event_proto_rawDesc = []byte{
	0x0a, 0x14, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xd0, 0x06, 0x0a, 0x12, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65,
	0x48, 0x00, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x3d, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48,
	0x00, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x31, 0x0a, 0x09, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69,
	0x66, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x08, 0x67, 0x69, 0x66, 0x74, 0x53, 0x65,
	0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x75, 0x61, 0x72, 0x64, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x67, 0x75, 0x61, 0x72, 0x64, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x12, 0x73, 0x75, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x68,
	0x61, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x70, 0x65,
	0x72, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x10,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x50, 0x0a, 0x14, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x12,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x47, 0x0a, 0x11, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x6c, 0x69, 0x6b, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x4a, 0x0a, 0x12, 0x6f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x10, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x61, 0x6e,
	0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x60, 0x0a, 0x1a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x72, 0x6f, 0x6f, 0x6d,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x17, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x22, 0x6f, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0xdd, 0x03, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x75, 0x61,
	0x72, 0x64, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x67, 0x75, 0x61, 0x72, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x64, 0x61, 0x6c, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x12, 0x38, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x61, 0x77, 0x5f, 0x6d, 0x73, 0x67,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x61, 0x77, 0x4d, 0x73, 0x67, 0x12, 0x33,
	0x0a, 0x16, 0x69, 0x73, 0x5f, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x76, 0x65,
	0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13,
	0x69, 0x73, 0x44, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0xd3, 0x01, 0x0a, 0x05, 0x4d, 0x65, 0x64, 0x61, 0x6c, 0x12, 0x21, 0x0a,
	0x0c, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x55, 0x70, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x72, 0x6f, 0x6f,
	0x6d, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d, 0x65, 0x64, 0x61, 0x6c,
	0x55, 0x70, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x64, 0x61,
	0x6c, 0x5f, 0x75, 0x70, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d,
	0x65, 0x64, 0x61, 0x6c, 0x55, 0x70, 0x75, 0x69, 0x64, 0x22, 0x84, 0x02, 0x0a, 0x0c, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x33, 0x0a, 0x16, 0x69,
	0x73, 0x5f, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x44,
	0x75, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x99, 0x01, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f,
	0x6c, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x69,
	0x76, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x92, 0x03, 0x0a,
	0x08, 0x47, 0x69, 0x66, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x67, 0x69, 0x66, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x69,
	0x66, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67,
	0x69, 0x66, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x69, 0x66, 0x74, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x67, 0x69, 0x66,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x33, 0x0a, 0x16,
	0x69, 0x73, 0x5f, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73,
	0x44, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0xf2, 0x02, 0x0a, 0x0d, 0x47, 0x75, 0x61, 0x72, 0x64, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x67, 0x75, 0x61, 0x72, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x67, 0x75, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x67, 0x75, 0x61, 0x72, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x33, 0x0a, 0x16, 0x69, 0x73, 0x5f, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6c,
	0x69, 0x76, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x13, 0x69, 0x73, 0x44, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x76, 0x65, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xd9, 0x02, 0x0a, 0x10, 0x53, 0x75, 0x70, 0x65, 0x72,
	0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x33, 0x0a,
	0x16, 0x69, 0x73, 0x5f, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69,
	0x73, 0x44, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0xf0, 0x01, 0x0a, 0x12, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x5f,
	0x6c, 0x61, 0x72, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x78,
	0x74, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x33, 0x0a, 0x16, 0x69, 0x73, 0x5f, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69,
	0x76, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x13, 0x69, 0x73, 0x44, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xce, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x6b, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x33, 0x0a, 0x16, 0x69, 0x73, 0x5f, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6c,
	0x69, 0x76, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x13, 0x69, 0x73, 0x44, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x76, 0x65, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x27, 0x0a, 0x0f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0xa3, 0x03, 0x0a, 0x10, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x09,
	0x74, 0x6f, 0x70, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x61, 0x6e, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x6b,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x08, 0x74, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x33, 0x0a, 0x16, 0x69, 0x73, 0x5f,
	0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x44, 0x75, 0x72,
	0x69, 0x6e, 0x67, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x84,
	0x01, 0x0a, 0x08, 0x52, 0x61, 0x6e, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x72, 0x61, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x61,
	0x63, 0x65, 0x55, 0x72, 0x6c, 0x22, 0xfe, 0x02, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x3d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x29, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x33, 0x0a, 0x16, 0x69, 0x73,
	0x5f, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x44, 0x75,
	0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x35, 0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x53,
	0x48, 0x41, 0x52, 0x45, 0x10, 0x02, 0x22, 0x8d, 0x02, 0x0a, 0x17, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x6f, 0x6f, 0x6d, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x69, 0x76, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xaa, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x33,
	0x0a, 0x16, 0x69, 0x73, 0x5f, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x76, 0x65,
	0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13,
	0x69, 0x73, 0x44, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0xab, 0x06, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x31, 0x0a, 0x0a, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x69, 0x66, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x67, 0x69, 0x66, 0x74, 0x53, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x3d, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x12, 0x3f, 0x0a, 0x0f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x65, 0x73, 0x12, 0x47, 0x0a, 0x12, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x10, 0x6c, 0x69, 0x6b, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x11, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x10, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x60, 0x0a, 0x1b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x6f, 0x6f, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x52, 0x18, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x73, 0x12, 0x4a, 0x0a, 0x13, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x11,
	0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x12, 0x50, 0x0a, 0x15, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x13,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x13, 0x73, 0x75, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x70, 0x65,
	0x72, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x11, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x40, 0x0a, 0x0f, 0x67, 0x75, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x75, 0x61, 0x72, 0x64, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x52, 0x0e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x73, 0x22, 0xda, 0x01, 0x0a, 0x1b, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x61, 0x6e, 0x6b,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x33, 0x0a, 0x16, 0x69, 0x73, 0x5f,
	0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x44, 0x75, 0x72,
	0x69, 0x6e, 0x67, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0xc9,
	0x03, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0xdc, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x1c, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8f, 0x01, 0x92,
	0x41, 0x70, 0x12, 0x12, 0xe8, 0xae, 0xb0, 0xe5, 0xbd, 0x95, 0xe7, 0x9b, 0xb4, 0xe6, 0x92, 0xad,
	0xe4, 0xba, 0x8b, 0xe4, 0xbb, 0xb6, 0x1a, 0x5a, 0xe6, 0x8e, 0xa5, 0xe6, 0x94, 0xb6, 0xe5, 0xb9,
	0xb6, 0xe5, 0xad, 0x98, 0xe5, 0x82, 0xa8, 0xe5, 0x90, 0x84, 0xe7, 0xa7, 0x8d, 0xe7, 0xb1, 0xbb,
	0xe5, 0x9e, 0x8b, 0xe7, 0x9a, 0x84, 0xe7, 0x9b, 0xb4, 0xe6, 0x92, 0xad, 0xe4, 0xba, 0x8b, 0xe4,
	0xbb, 0xb6, 0xef, 0xbc, 0x8c, 0xe5, 0xa6, 0x82, 0xe8, 0x81, 0x8a, 0xe5, 0xa4, 0xa9, 0xe6, 0xb6,
	0x88, 0xe6, 0x81, 0xaf, 0xe3, 0x80, 0x81, 0xe7, 0xa4, 0xbc, 0xe7, 0x89, 0xa9, 0xe3, 0x80, 0x81,
	0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe7, 0xad, 0x89, 0xe3,
	0x80, 0x82, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x3a, 0x01, 0x2a, 0x22, 0x11, 0x2f, 0x76, 0x31,
	0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0xd9,
	0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x24, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x75, 0x92, 0x41, 0x52, 0x12, 0x12, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96,
	0xe4, 0xbc, 0x9a, 0xe8, 0xaf, 0x9d, 0xe4, 0xba, 0x8b, 0xe4, 0xbb, 0xb6, 0x1a, 0x3c, 0xe8, 0x8e,
	0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe4, 0xbc, 0x9a, 0xe8, 0xaf, 0x9d,
	0xe7, 0x9a, 0x84, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe4, 0xba, 0x8b, 0xe4, 0xbb, 0xb6, 0xef,
	0xbc, 0x8c, 0xe6, 0x8c, 0x89, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe9, 0xa1, 0xba, 0xe5, 0xba,
	0x8f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe3, 0x80, 0x82, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a,
	0x12, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x42, 0xe1, 0x01, 0x92, 0x41, 0xbb,
	0x01, 0x12, 0x52, 0x0a, 0x11, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x20, 0x41, 0x50, 0x49, 0x22, 0x38, 0x0a, 0x10, 0x67, 0x6f, 0x2d, 0x78, 0x6c, 0x69,
	0x76, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x24, 0x68, 0x74, 0x74, 0x70,
	0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79,
	0x6f, 0x75, 0x72, 0x5f, 0x6f, 0x72, 0x67, 0x2f, 0x67, 0x6f, 0x2d, 0x78, 0x6c, 0x69, 0x76, 0x65,
	0x32, 0x03, 0x31, 0x2e, 0x30, 0x2a, 0x02, 0x01, 0x02, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x52, 0x1c, 0x0a,
	0x03, 0x34, 0x30, 0x34, 0x12, 0x15, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x52, 0x1f, 0x0a, 0x03, 0x35,
	0x30, 0x30, 0x12, 0x18, 0x0a, 0x16, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x5a, 0x20, 0x67, 0x6f,
	0x2d, 0x78, 0x6c, 0x69, 0x76, 0x65, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x3b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x76, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_event_v1_event_proto_rawDescOnce sync.Once
	file_event_v1_event_proto_rawDescData = file_event_v1_event_proto_rawDesc
)

func file_event_v1_event_proto_rawDescGZIP() []byte {
	file_event_v1_event_proto_rawDescOnce.Do(func() {
		file_event_v1_event_proto_rawDescData = protoimpl.X.CompressGZIP(file_event_v1_event_proto_rawDescData)
	})
	return file_event_v1_event_proto_rawDescData
}

var file_event_v1_event_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_event_v1_event_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_event_v1_event_proto_goTypes = []interface{}{
	(UserInteraction_InteractionType)(0), // 0: event.v1.UserInteraction.InteractionType
	(*RecordEventRequest)(nil),           // 1: event.v1.RecordEventRequest
	(*RecordEventResponse)(nil),          // 2: event.v1.RecordEventResponse
	(*ChatMessage)(nil),                  // 3: event.v1.ChatMessage
	(*Medal)(nil),                        // 4: event.v1.Medal
	(*UserPresence)(nil),                 // 5: event.v1.UserPresence
	(*StreamStatus)(nil),                 // 6: event.v1.StreamStatus
	(*GiftSent)(nil),                     // 7: event.v1.GiftSent
	(*GuardPurchase)(nil),                // 8: event.v1.GuardPurchase
	(*SuperChatMessage)(nil),             // 9: event.v1.SuperChatMessage
	(*WatchedCountUpdate)(nil),           // 10: event.v1.WatchedCountUpdate
	(*LikeCountUpdate)(nil),              // 11: event.v1.LikeCountUpdate
	(*OnlineRankCount)(nil),              // 12: event.v1.OnlineRankCount
	(*OnlineRankUpdate)(nil),             // 13: event.v1.OnlineRankUpdate
	(*UserInteraction)(nil),              // 14: event.v1.UserInteraction
	(*PlatformRoomInfoUpdated)(nil),      // 15: event.v1.PlatformRoomInfoUpdated
	(*GetAllSessionEventsRequest)(nil),   // 16: event.v1.GetAllSessionEventsRequest
	(*GetAllSessionEventsResponse)(nil),  // 17: event.v1.GetAllSessionEventsResponse
	(*OnlineRankCountUpdatedEvent)(nil),  // 18: event.v1.OnlineRankCountUpdatedEvent
	(*OnlineRankUpdate_RankUser)(nil),    // 19: event.v1.OnlineRankUpdate.RankUser
	(*timestamppb.Timestamp)(nil),        // 20: google.protobuf.Timestamp
}
var file_event_v1_event_proto_depIdxs = []int32{
	3,  // 0: event.v1.RecordEventRequest.chat_message:type_name -> event.v1.ChatMessage
	5,  // 1: event.v1.RecordEventRequest.user_presence:type_name -> event.v1.UserPresence
	6,  // 2: event.v1.RecordEventRequest.stream_status:type_name -> event.v1.StreamStatus
	7,  // 3: event.v1.RecordEventRequest.gift_sent:type_name -> event.v1.GiftSent
	8,  // 4: event.v1.RecordEventRequest.guard_purchase:type_name -> event.v1.GuardPurchase
	9,  // 5: event.v1.RecordEventRequest.super_chat_message:type_name -> event.v1.SuperChatMessage
	10, // 6: event.v1.RecordEventRequest.watched_count_update:type_name -> event.v1.WatchedCountUpdate
	11, // 7: event.v1.RecordEventRequest.like_count_update:type_name -> event.v1.LikeCountUpdate
	13, // 8: event.v1.RecordEventRequest.online_rank_update:type_name -> event.v1.OnlineRankUpdate
	14, // 9: event.v1.RecordEventRequest.user_interaction:type_name -> event.v1.UserInteraction
	15, // 10: event.v1.RecordEventRequest.platform_room_info_updated:type_name -> event.v1.PlatformRoomInfoUpdated
	4,  // 11: event.v1.ChatMessage.medal:type_name -> event.v1.Medal
	20, // 12: event.v1.ChatMessage.timestamp:type_name -> google.protobuf.Timestamp
	20, // 13: event.v1.UserPresence.timestamp:type_name -> google.protobuf.Timestamp
	20, // 14: event.v1.StreamStatus.timestamp:type_name -> google.protobuf.Timestamp
	20, // 15: event.v1.GiftSent.timestamp:type_name -> google.protobuf.Timestamp
	20, // 16: event.v1.GuardPurchase.timestamp:type_name -> google.protobuf.Timestamp
	20, // 17: event.v1.SuperChatMessage.timestamp:type_name -> google.protobuf.Timestamp
	20, // 18: event.v1.WatchedCountUpdate.timestamp:type_name -> google.protobuf.Timestamp
	20, // 19: event.v1.LikeCountUpdate.timestamp:type_name -> google.protobuf.Timestamp
	19, // 20: event.v1.OnlineRankUpdate.top_users:type_name -> event.v1.OnlineRankUpdate.RankUser
	20, // 21: event.v1.OnlineRankUpdate.timestamp:type_name -> google.protobuf.Timestamp
	0,  // 22: event.v1.UserInteraction.type:type_name -> event.v1.UserInteraction.InteractionType
	20, // 23: event.v1.UserInteraction.timestamp:type_name -> google.protobuf.Timestamp
	20, // 24: event.v1.PlatformRoomInfoUpdated.timestamp:type_name -> google.protobuf.Timestamp
	20, // 25: event.v1.GetAllSessionEventsRequest.timestamp:type_name -> google.protobuf.Timestamp
	3,  // 26: event.v1.GetAllSessionEventsResponse.chat_messages:type_name -> event.v1.ChatMessage
	7,  // 27: event.v1.GetAllSessionEventsResponse.gift_sents:type_name -> event.v1.GiftSent
	5,  // 28: event.v1.GetAllSessionEventsResponse.user_presences:type_name -> event.v1.UserPresence
	6,  // 29: event.v1.GetAllSessionEventsResponse.stream_statuses:type_name -> event.v1.StreamStatus
	11, // 30: event.v1.GetAllSessionEventsResponse.like_count_updates:type_name -> event.v1.LikeCountUpdate
	14, // 31: event.v1.GetAllSessionEventsResponse.user_interactions:type_name -> event.v1.UserInteraction
	15, // 32: event.v1.GetAllSessionEventsResponse.platform_room_info_updateds:type_name -> event.v1.PlatformRoomInfoUpdated
	13, // 33: event.v1.GetAllSessionEventsResponse.online_rank_updates:type_name -> event.v1.OnlineRankUpdate
	10, // 34: event.v1.GetAllSessionEventsResponse.watched_count_updates:type_name -> event.v1.WatchedCountUpdate
	9,  // 35: event.v1.GetAllSessionEventsResponse.super_chat_messages:type_name -> event.v1.SuperChatMessage
	8,  // 36: event.v1.GetAllSessionEventsResponse.guard_purchases:type_name -> event.v1.GuardPurchase
	20, // 37: event.v1.OnlineRankCountUpdatedEvent.timestamp:type_name -> google.protobuf.Timestamp
	1,  // 38: event.v1.EventService.RecordEvent:input_type -> event.v1.RecordEventRequest
	16, // 39: event.v1.EventService.GetAllSessionEvents:input_type -> event.v1.GetAllSessionEventsRequest
	2,  // 40: event.v1.EventService.RecordEvent:output_type -> event.v1.RecordEventResponse
	17, // 41: event.v1.EventService.GetAllSessionEvents:output_type -> event.v1.GetAllSessionEventsResponse
	40, // [40:42] is the sub-list for method output_type
	38, // [38:40] is the sub-list for method input_type
	38, // [38:38] is the sub-list for extension type_name
	38, // [38:38] is the sub-list for extension extendee
	0,  // [0:38] is the sub-list for field type_name
}

func init() { file_event_v1_event_proto_init() }
func file_event_v1_event_proto_init() {
	if File_event_v1_event_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_event_v1_event_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_v1_event_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_v1_event_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_v1_event_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Medal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_v1_event_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPresence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_v1_event_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_v1_event_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GiftSent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_v1_event_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuardPurchase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_v1_event_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuperChatMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_v1_event_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchedCountUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_v1_event_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LikeCountUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_v1_event_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnlineRankCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_v1_event_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnlineRankUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_v1_event_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInteraction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_v1_event_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlatformRoomInfoUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_v1_event_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllSessionEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_v1_event_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllSessionEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_v1_event_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnlineRankCountUpdatedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_v1_event_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnlineRankUpdate_RankUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_event_v1_event_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*RecordEventRequest_ChatMessage)(nil),
		(*RecordEventRequest_UserPresence)(nil),
		(*RecordEventRequest_StreamStatus)(nil),
		(*RecordEventRequest_GiftSent)(nil),
		(*RecordEventRequest_GuardPurchase)(nil),
		(*RecordEventRequest_SuperChatMessage)(nil),
		(*RecordEventRequest_WatchedCountUpdate)(nil),
		(*RecordEventRequest_LikeCountUpdate)(nil),
		(*RecordEventRequest_OnlineRankUpdate)(nil),
		(*RecordEventRequest_UserInteraction)(nil),
		(*RecordEventRequest_PlatformRoomInfoUpdated)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_event_v1_event_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_event_v1_event_proto_goTypes,
		DependencyIndexes: file_event_v1_event_proto_depIdxs,
		EnumInfos:         file_event_v1_event_proto_enumTypes,
		MessageInfos:      file_event_v1_event_proto_msgTypes,
	}.Build()
	File_event_v1_event_proto = out.File
	file_event_v1_event_proto_rawDesc = nil
	file_event_v1_event_proto_goTypes = nil
	file_event_v1_event_proto_depIdxs = nil
}
