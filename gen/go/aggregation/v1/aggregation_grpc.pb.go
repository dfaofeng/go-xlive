// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: aggregation/v1/aggregation.proto

package aggregationv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AggregationService_TriggerAggregation_FullMethodName        = "/aggregation.v1.AggregationService/TriggerAggregation"
	AggregationService_HandleStreamStatus_FullMethodName        = "/aggregation.v1.AggregationService/HandleStreamStatus"
	AggregationService_HealthCheck_FullMethodName               = "/aggregation.v1.AggregationService/HealthCheck"
	AggregationService_GetSessionMetricsTimeline_FullMethodName = "/aggregation.v1.AggregationService/GetSessionMetricsTimeline"
)

// AggregationServiceClient is the client API for AggregationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AggregationServiceClient interface {
	TriggerAggregation(ctx context.Context, in *TriggerAggregationRequest, opts ...grpc.CallOption) (*TriggerAggregationResponse, error)
	// 新增：处理流状态变化的 RPC
	HandleStreamStatus(ctx context.Context, in *StreamStatus, opts ...grpc.CallOption) (*emptypb.Empty, error)
	HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	// 新增: 查询场次指标时间线
	GetSessionMetricsTimeline(ctx context.Context, in *GetSessionMetricsTimelineRequest, opts ...grpc.CallOption) (*GetSessionMetricsTimelineResponse, error)
}

type aggregationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAggregationServiceClient(cc grpc.ClientConnInterface) AggregationServiceClient {
	return &aggregationServiceClient{cc}
}

func (c *aggregationServiceClient) TriggerAggregation(ctx context.Context, in *TriggerAggregationRequest, opts ...grpc.CallOption) (*TriggerAggregationResponse, error) {
	out := new(TriggerAggregationResponse)
	err := c.cc.Invoke(ctx, AggregationService_TriggerAggregation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregationServiceClient) HandleStreamStatus(ctx context.Context, in *StreamStatus, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AggregationService_HandleStreamStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregationServiceClient) HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, AggregationService_HealthCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregationServiceClient) GetSessionMetricsTimeline(ctx context.Context, in *GetSessionMetricsTimelineRequest, opts ...grpc.CallOption) (*GetSessionMetricsTimelineResponse, error) {
	out := new(GetSessionMetricsTimelineResponse)
	err := c.cc.Invoke(ctx, AggregationService_GetSessionMetricsTimeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AggregationServiceServer is the server API for AggregationService service.
// All implementations should embed UnimplementedAggregationServiceServer
// for forward compatibility
type AggregationServiceServer interface {
	TriggerAggregation(context.Context, *TriggerAggregationRequest) (*TriggerAggregationResponse, error)
	// 新增：处理流状态变化的 RPC
	HandleStreamStatus(context.Context, *StreamStatus) (*emptypb.Empty, error)
	HealthCheck(context.Context, *emptypb.Empty) (*HealthCheckResponse, error)
	// 新增: 查询场次指标时间线
	GetSessionMetricsTimeline(context.Context, *GetSessionMetricsTimelineRequest) (*GetSessionMetricsTimelineResponse, error)
}

// UnimplementedAggregationServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAggregationServiceServer struct {
}

func (UnimplementedAggregationServiceServer) TriggerAggregation(context.Context, *TriggerAggregationRequest) (*TriggerAggregationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerAggregation not implemented")
}
func (UnimplementedAggregationServiceServer) HandleStreamStatus(context.Context, *StreamStatus) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleStreamStatus not implemented")
}
func (UnimplementedAggregationServiceServer) HealthCheck(context.Context, *emptypb.Empty) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedAggregationServiceServer) GetSessionMetricsTimeline(context.Context, *GetSessionMetricsTimelineRequest) (*GetSessionMetricsTimelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessionMetricsTimeline not implemented")
}

// UnsafeAggregationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AggregationServiceServer will
// result in compilation errors.
type UnsafeAggregationServiceServer interface {
	mustEmbedUnimplementedAggregationServiceServer()
}

func RegisterAggregationServiceServer(s grpc.ServiceRegistrar, srv AggregationServiceServer) {
	s.RegisterService(&AggregationService_ServiceDesc, srv)
}

func _AggregationService_TriggerAggregation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerAggregationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregationServiceServer).TriggerAggregation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AggregationService_TriggerAggregation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregationServiceServer).TriggerAggregation(ctx, req.(*TriggerAggregationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AggregationService_HandleStreamStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregationServiceServer).HandleStreamStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AggregationService_HandleStreamStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregationServiceServer).HandleStreamStatus(ctx, req.(*StreamStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _AggregationService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregationServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AggregationService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregationServiceServer).HealthCheck(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AggregationService_GetSessionMetricsTimeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionMetricsTimelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregationServiceServer).GetSessionMetricsTimeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AggregationService_GetSessionMetricsTimeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregationServiceServer).GetSessionMetricsTimeline(ctx, req.(*GetSessionMetricsTimelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AggregationService_ServiceDesc is the grpc.ServiceDesc for AggregationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AggregationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aggregation.v1.AggregationService",
	HandlerType: (*AggregationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TriggerAggregation",
			Handler:    _AggregationService_TriggerAggregation_Handler,
		},
		{
			MethodName: "HandleStreamStatus",
			Handler:    _AggregationService_HandleStreamStatus_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _AggregationService_HealthCheck_Handler,
		},
		{
			MethodName: "GetSessionMetricsTimeline",
			Handler:    _AggregationService_GetSessionMetricsTimeline_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aggregation/v1/aggregation.proto",
}
