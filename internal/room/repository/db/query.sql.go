// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package db

import (
	"context"
)

const createRoom = `-- name: CreateRoom :one
INSERT INTO rooms (room_id, room_name, owner_user_id, status)
VALUES ($1, $2, $3, $4)
    RETURNING room_id, room_name, owner_user_id, status, created_at
`

type CreateRoomParams struct {
	RoomID      string `json:"room_id"`
	RoomName    string `json:"room_name"`
	OwnerUserID string `json:"owner_user_id"`
	Status      string `json:"status"`
}

// 创建一个新房间，并返回创建后的所有字段
func (q *Queries) CreateRoom(ctx context.Context, arg CreateRoomParams) (Room, error) {
	row := q.db.QueryRow(ctx, createRoom,
		arg.RoomID,
		arg.RoomName,
		arg.OwnerUserID,
		arg.Status,
	)
	var i Room
	err := row.Scan(
		&i.RoomID,
		&i.RoomName,
		&i.OwnerUserID,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getRoomByID = `-- name: GetRoomByID :one
SELECT room_id, room_name, owner_user_id, status, created_at
FROM rooms
WHERE room_id = $1
    LIMIT 1
`

// 根据房间 ID 查询房间信息
func (q *Queries) GetRoomByID(ctx context.Context, roomID string) (Room, error) {
	row := q.db.QueryRow(ctx, getRoomByID, roomID)
	var i Room
	err := row.Scan(
		&i.RoomID,
		&i.RoomName,
		&i.OwnerUserID,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const updateRoomStatus = `-- name: UpdateRoomStatus :one
UPDATE rooms
SET status = $2
WHERE room_id = $1
    RETURNING room_id, room_name, owner_user_id, status, created_at
`

type UpdateRoomStatusParams struct {
	RoomID string `json:"room_id"`
	Status string `json:"status"`
}

// 更新指定房间的状态，并返回更新后的记录
func (q *Queries) UpdateRoomStatus(ctx context.Context, arg UpdateRoomStatusParams) (Room, error) {
	row := q.db.QueryRow(ctx, updateRoomStatus, arg.RoomID, arg.Status)
	var i Room
	err := row.Scan(
		&i.RoomID,
		&i.RoomName,
		&i.OwnerUserID,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}
