// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (session_id, room_id, start_time, status) VALUES ($1, $2, $3, $4) RETURNING session_id, room_id, start_time, end_time, status, created_at, total_events, total_danmaku, total_gifts_value
`

type CreateSessionParams struct {
	SessionID string             `json:"session_id"`
	RoomID    string             `json:"room_id"`
	StartTime pgtype.Timestamptz `json:"start_time"`
	Status    string             `json:"status"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, createSession,
		arg.SessionID,
		arg.RoomID,
		arg.StartTime,
		arg.Status,
	)
	var i Session
	err := row.Scan(
		&i.SessionID,
		&i.RoomID,
		&i.StartTime,
		&i.EndTime,
		&i.Status,
		&i.CreatedAt,
		&i.TotalEvents,
		&i.TotalDanmaku,
		&i.TotalGiftsValue,
	)
	return i, err
}

const endSession = `-- name: EndSession :one
UPDATE sessions SET status = 'ended', end_time = $2 WHERE session_id = $1 AND status = 'live' RETURNING session_id, room_id, start_time, end_time, status, created_at, total_events, total_danmaku, total_gifts_value
`

type EndSessionParams struct {
	SessionID string             `json:"session_id"`
	EndTime   pgtype.Timestamptz `json:"end_time"`
}

func (q *Queries) EndSession(ctx context.Context, arg EndSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, endSession, arg.SessionID, arg.EndTime)
	var i Session
	err := row.Scan(
		&i.SessionID,
		&i.RoomID,
		&i.StartTime,
		&i.EndTime,
		&i.Status,
		&i.CreatedAt,
		&i.TotalEvents,
		&i.TotalDanmaku,
		&i.TotalGiftsValue,
	)
	return i, err
}

const getSessionByID = `-- name: GetSessionByID :one
SELECT session_id, room_id, start_time, end_time, status, created_at, total_events, total_danmaku, total_gifts_value FROM sessions WHERE session_id = $1 LIMIT 1
`

func (q *Queries) GetSessionByID(ctx context.Context, sessionID string) (Session, error) {
	row := q.db.QueryRow(ctx, getSessionByID, sessionID)
	var i Session
	err := row.Scan(
		&i.SessionID,
		&i.RoomID,
		&i.StartTime,
		&i.EndTime,
		&i.Status,
		&i.CreatedAt,
		&i.TotalEvents,
		&i.TotalDanmaku,
		&i.TotalGiftsValue,
	)
	return i, err
}

const updateSessionAggregates = `-- name: UpdateSessionAggregates :one
UPDATE sessions SET total_events = $2, total_danmaku = $3, total_gifts_value = $4 WHERE session_id = $1 RETURNING session_id, room_id, start_time, end_time, status, created_at, total_events, total_danmaku, total_gifts_value
`

type UpdateSessionAggregatesParams struct {
	SessionID       string `json:"session_id"`
	TotalEvents     int64  `json:"total_events"`
	TotalDanmaku    int64  `json:"total_danmaku"`
	TotalGiftsValue int64  `json:"total_gifts_value"`
}

func (q *Queries) UpdateSessionAggregates(ctx context.Context, arg UpdateSessionAggregatesParams) (Session, error) {
	row := q.db.QueryRow(ctx, updateSessionAggregates,
		arg.SessionID,
		arg.TotalEvents,
		arg.TotalDanmaku,
		arg.TotalGiftsValue,
	)
	var i Session
	err := row.Scan(
		&i.SessionID,
		&i.RoomID,
		&i.StartTime,
		&i.EndTime,
		&i.Status,
		&i.CreatedAt,
		&i.TotalEvents,
		&i.TotalDanmaku,
		&i.TotalGiftsValue,
	)
	return i, err
}
