// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countEventsBySessionID = `-- name: CountEventsBySessionID :one

SELECT count(*)
FROM events
WHERE session_id = $1              -- $1
  AND ($2::TIMESTAMPTZ IS NULL OR event_time >= $2)  -- $2
  AND ($3::TIMESTAMPTZ IS NULL OR event_time <= $3)      -- $3
  AND ($4::TEXT IS NULL OR event_type = $4)
`

type CountEventsBySessionIDParams struct {
	SessionID       pgtype.Text        `json:"session_id"`
	StartTime       pgtype.Timestamptz `json:"start_time"`
	EndTime         pgtype.Timestamptz `json:"end_time"`
	EventTypeFilter string             `json:"event_type_filter"`
}

// $6
// 修改：为所有参数添加 sqlc.arg() 注释
func (q *Queries) CountEventsBySessionID(ctx context.Context, arg CountEventsBySessionIDParams) (int64, error) {
	row := q.db.QueryRow(ctx, countEventsBySessionID,
		arg.SessionID,
		arg.StartTime,
		arg.EndTime,
		arg.EventTypeFilter,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createEvent = `-- name: CreateEvent :exec
INSERT INTO events (session_id, room_id, event_type, user_id, event_time, data)
VALUES ($1, $2, $3, $4, $5, $6)
`

type CreateEventParams struct {
	SessionID pgtype.Text        `json:"session_id"`
	RoomID    pgtype.Text        `json:"room_id"`
	EventType string             `json:"event_type"`
	UserID    pgtype.Text        `json:"user_id"`
	EventTime pgtype.Timestamptz `json:"event_time"`
	Data      []byte             `json:"data"`
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) error {
	_, err := q.db.Exec(ctx, createEvent,
		arg.SessionID,
		arg.RoomID,
		arg.EventType,
		arg.UserID,
		arg.EventTime,
		arg.Data,
	)
	return err
}

const queryEventsBySessionID = `-- name: QueryEventsBySessionID :many
SELECT event_id, session_id, room_id, event_type, user_id, event_time, data, created_at
FROM events
WHERE session_id = $1 -- $1
  AND ($2::TIMESTAMPTZ IS NULL OR event_time >= $2) -- $2
  AND ($3::TIMESTAMPTZ IS NULL OR event_time <= $3)     -- $3
ORDER BY event_time ASC
    LIMIT $5  -- $4 (使用 'lim' 作为字段名示例)
OFFSET $4
`

type QueryEventsBySessionIDParams struct {
	SessionID pgtype.Text        `json:"session_id"`
	StartTime pgtype.Timestamptz `json:"start_time"`
	EndTime   pgtype.Timestamptz `json:"end_time"`
	Offs      int32              `json:"offs"`
	Lim       int32              `json:"lim"`
}

// 修改：为所有参数添加 sqlc.arg() 注释以生成明确的字段名
func (q *Queries) QueryEventsBySessionID(ctx context.Context, arg QueryEventsBySessionIDParams) ([]Event, error) {
	rows, err := q.db.Query(ctx, queryEventsBySessionID,
		arg.SessionID,
		arg.StartTime,
		arg.EndTime,
		arg.Offs,
		arg.Lim,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Event{}
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.EventID,
			&i.SessionID,
			&i.RoomID,
			&i.EventType,
			&i.UserID,
			&i.EventTime,
			&i.Data,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const queryEventsBySessionIDAndType = `-- name: QueryEventsBySessionIDAndType :many

SELECT event_id, session_id, room_id, event_type, user_id, event_time, data, created_at
FROM events
WHERE session_id = $1             -- $1
  AND event_type = $2           -- $2
  AND ($3::TIMESTAMPTZ IS NULL OR event_time >= $3) -- $3
  AND ($4::TIMESTAMPTZ IS NULL OR event_time <= $4)     -- $4
ORDER BY event_time ASC
    LIMIT $6                               -- $5
OFFSET $5
`

type QueryEventsBySessionIDAndTypeParams struct {
	SessionID pgtype.Text        `json:"session_id"`
	EventType string             `json:"event_type"`
	StartTime pgtype.Timestamptz `json:"start_time"`
	EndTime   pgtype.Timestamptz `json:"end_time"`
	Offs      int32              `json:"offs"`
	Lim       int32              `json:"lim"`
}

// $5 (使用 'offs' 作为字段名示例)
// 修改：为所有参数添加 sqlc.arg() 注释
func (q *Queries) QueryEventsBySessionIDAndType(ctx context.Context, arg QueryEventsBySessionIDAndTypeParams) ([]Event, error) {
	rows, err := q.db.Query(ctx, queryEventsBySessionIDAndType,
		arg.SessionID,
		arg.EventType,
		arg.StartTime,
		arg.EndTime,
		arg.Offs,
		arg.Lim,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Event{}
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.EventID,
			&i.SessionID,
			&i.RoomID,
			&i.EventType,
			&i.UserID,
			&i.EventTime,
			&i.Data,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
