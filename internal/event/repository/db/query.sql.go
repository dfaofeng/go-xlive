// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEvent = `-- name: CreateEvent :exec
INSERT INTO events (session_id, room_id, event_type, user_id, event_time, data)
VALUES ($1, $2, $3, $4, $5, $6)
`

type CreateEventParams struct {
	SessionID pgtype.Text        `json:"session_id"`
	RoomID    pgtype.Text        `json:"room_id"`
	EventType string             `json:"event_type"`
	UserID    pgtype.Text        `json:"user_id"`
	EventTime pgtype.Timestamptz `json:"event_time"`
	Data      []byte             `json:"data"`
}

// 存储一个事件，包含 room_id
func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) error {
	_, err := q.db.Exec(ctx, createEvent,
		arg.SessionID,
		arg.RoomID,
		arg.EventType,
		arg.UserID,
		arg.EventTime,
		arg.Data,
	)
	return err
}

const queryEventsBySessionID = `-- name: QueryEventsBySessionID :many
SELECT event_id, session_id, room_id, event_type, user_id, event_time, data, created_at
FROM events
WHERE session_id = $1
ORDER BY event_time ASC
`

// 查询指定场次的所有事件 (按时间排序)
// TODO: 添加分页和时间范围过滤
func (q *Queries) QueryEventsBySessionID(ctx context.Context, sessionID pgtype.Text) ([]Event, error) {
	rows, err := q.db.Query(ctx, queryEventsBySessionID, sessionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Event{}
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.EventID,
			&i.SessionID,
			&i.RoomID,
			&i.EventType,
			&i.UserID,
			&i.EventTime,
			&i.Data,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const queryEventsBySessionIDAndType = `-- name: QueryEventsBySessionIDAndType :many
SELECT event_id, session_id, room_id, event_type, user_id, event_time, data, created_at
FROM events
WHERE session_id = $1 AND event_type = $2
ORDER BY event_time ASC
`

type QueryEventsBySessionIDAndTypeParams struct {
	SessionID pgtype.Text `json:"session_id"`
	EventType string      `json:"event_type"`
}

// 查询指定场次和类型的事件
// TODO: 添加分页和时间范围过滤
func (q *Queries) QueryEventsBySessionIDAndType(ctx context.Context, arg QueryEventsBySessionIDAndTypeParams) ([]Event, error) {
	rows, err := q.db.Query(ctx, queryEventsBySessionIDAndType, arg.SessionID, arg.EventType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Event{}
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.EventID,
			&i.SessionID,
			&i.RoomID,
			&i.EventType,
			&i.UserID,
			&i.EventTime,
			&i.Data,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
