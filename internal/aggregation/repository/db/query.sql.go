// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getSessionMetricsTimeline = `-- name: GetSessionMetricsTimeline :many
SELECT
    timestamp,
    danmaku_count,
    gift_value,
    like_count,
    watched_count,
    online_rank_count -- 新增
   FROM
    session_metrics_timeline
WHERE
    session_id = $1
AND
    timestamp >= $2 -- 开始时间 (包含)
AND
    timestamp <= $3 -- 结束时间 (包含)
ORDER BY
    timestamp ASC
`

type GetSessionMetricsTimelineParams struct {
	SessionID   string             `json:"session_id"`
	Timestamp   pgtype.Timestamptz `json:"timestamp"`
	Timestamp_2 pgtype.Timestamptz `json:"timestamp_2"`
}

type GetSessionMetricsTimelineRow struct {
	Timestamp       pgtype.Timestamptz `json:"timestamp"`
	DanmakuCount    int64              `json:"danmaku_count"`
	GiftValue       int64              `json:"gift_value"`
	LikeCount       int64              `json:"like_count"`
	WatchedCount    int64              `json:"watched_count"`
	OnlineRankCount int64              `json:"online_rank_count"`
}

func (q *Queries) GetSessionMetricsTimeline(ctx context.Context, arg GetSessionMetricsTimelineParams) ([]GetSessionMetricsTimelineRow, error) {
	rows, err := q.db.Query(ctx, getSessionMetricsTimeline, arg.SessionID, arg.Timestamp, arg.Timestamp_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetSessionMetricsTimelineRow{}
	for rows.Next() {
		var i GetSessionMetricsTimelineRow
		if err := rows.Scan(
			&i.Timestamp,
			&i.DanmakuCount,
			&i.GiftValue,
			&i.LikeCount,
			&i.WatchedCount,
			&i.OnlineRankCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertSessionMetric = `-- name: InsertSessionMetric :one

INSERT INTO session_metrics_timeline (
    session_id,
    timestamp,
    danmaku_count,
    gift_value,
    like_count,
    watched_count,
    online_rank_count -- 新增
   ) VALUES (
    $1, $2, $3, $4, $5, $6, $7 -- 新增参数 $7
   )
   RETURNING id, session_id, timestamp, danmaku_count, gift_value, like_count, watched_count, online_rank_count, created_at
`

type InsertSessionMetricParams struct {
	SessionID       string             `json:"session_id"`
	Timestamp       pgtype.Timestamptz `json:"timestamp"`
	DanmakuCount    int64              `json:"danmaku_count"`
	GiftValue       int64              `json:"gift_value"`
	LikeCount       int64              `json:"like_count"`
	WatchedCount    int64              `json:"watched_count"`
	OnlineRankCount int64              `json:"online_rank_count"`
}

// internal/aggregation/repository/query.sql
func (q *Queries) InsertSessionMetric(ctx context.Context, arg InsertSessionMetricParams) (SessionMetricsTimeline, error) {
	row := q.db.QueryRow(ctx, insertSessionMetric,
		arg.SessionID,
		arg.Timestamp,
		arg.DanmakuCount,
		arg.GiftValue,
		arg.LikeCount,
		arg.WatchedCount,
		arg.OnlineRankCount,
	)
	var i SessionMetricsTimeline
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.Timestamp,
		&i.DanmakuCount,
		&i.GiftValue,
		&i.LikeCount,
		&i.WatchedCount,
		&i.OnlineRankCount,
		&i.CreatedAt,
	)
	return i, err
}
